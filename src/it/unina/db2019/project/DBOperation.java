/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.unina.db2019.project;

import it.unina.db2019.operations.*;
import java.awt.Toolkit;
import javax.swing.*;

/**
 *
 * @author Sysken
 */
public class DBOperation extends javax.swing.JFrame {
   
    public static DefaultFrame[] currentlyOpen = new DefaultFrame[15];
    
    /**
     * Creates new form DBOperation
     */
    public DBOperation() {
        initComponents();
        setIcon();
        login();
        this.setResizable(false);
        getRootPane().setDefaultButton(jButtonStart);
        jButtonStart.setFocusable(false);
    }
    
   private void login() {
      Login l = new Login(this, true);
      l.setVisible(true);
      if (l.getPressed() != Login.LOGIN) {
         dispose();
      } else {
         setVisible(true);
      }
   }
    
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("iconCD.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList = new javax.swing.JList<>();
        jLabelList = new javax.swing.JLabel();
        jLabelOperation = new javax.swing.JLabel();
        jButtonStart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("UML STORAGE");

        jList.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jList.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Class Diagram", "Classe", "Interfaccia", "Associazione", "Attributo", "Metodo", "Parametro", "Tipo", "Partecipazione", "Literal", "Qualificazione", "Realizzazione", "Composizione", "Dipendenza", "Specializ. Interfacce" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList.setToolTipText(null);
        jList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jList);

        jLabelList.setFont(new java.awt.Font("Book Antiqua", 1, 18)); // NOI18N
        jLabelList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/unina/db2019/project/db.png"))); // NOI18N
        jLabelList.setText("Modelli");

        jLabelOperation.setFont(new java.awt.Font("Cambria Math", 1, 36)); // NOI18N
        jLabelOperation.setForeground(new java.awt.Color(0, 153, 153));
        jLabelOperation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelOperation.setText("Selezione");
        jLabelOperation.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButtonStart.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButtonStart.setText("Procedi");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelOperation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jLabelList))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabelOperation, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelList, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        int[] selectedIndex = jList.getSelectedIndices();
        if(selectedIndex.length > 0){
            for(int i: selectedIndex){
                switch(i){
                    case 0:
                        if(currentlyOpen[0] == null){
                            ClassDiagram classDiagram = new ClassDiagram();
                            classDiagram.setVisible(true);
                            currentlyOpen[0] =  classDiagram;
                        } else{
                            JOptionPane.showMessageDialog(this, "È già presente un form per: CLASS DIAGRAM",
                                                          "Errore", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case 1:
                        if(currentlyOpen[1] == null){
                            Classe classe = new Classe();
                            classe.setVisible(true);
                            currentlyOpen[1] = classe;
                        } else{
                            JOptionPane.showMessageDialog(this, "È già presente un form per: CLASSE",
                                                          "Errore", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case 2:
                        if(currentlyOpen[2] == null){
                            Interfaccia interfaccia = new Interfaccia();
                            interfaccia.setVisible(true);
                            currentlyOpen[2] = interfaccia;
                        } else{
                            JOptionPane.showMessageDialog(this, "È già presente un form per: INTERFACCIA",
                                                          "Errore", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case 3:
                        if(currentlyOpen[3] == null){
                            Associazione associazione = new Associazione();
                            associazione.setVisible(true);
                            currentlyOpen[3] = associazione;
                        } else{
                            JOptionPane.showMessageDialog(this, "È già presente un form per: ASSOCIAZIONE",
                                                          "Errore", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case 4:
                        if(currentlyOpen[4] == null){
                            Attributo attributo = new Attributo();
                            attributo.setVisible(true);
                            currentlyOpen[4] = attributo;
                        } else{
                            JOptionPane.showMessageDialog(this, "È già presente un form per: ATTRIBUTO",
                                                          "Errore", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case 5:
                        if(currentlyOpen[5] == null){
                            Metodo metodo = new Metodo();
                            metodo.setVisible(true);
                            currentlyOpen[5] = metodo;
                        } else{
                            JOptionPane.showMessageDialog(this, "È già presente un form per: METODO",
                                                          "Errore", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case 6:
                        if(currentlyOpen[6] == null){
                            Parametro parametro = new Parametro();
                            parametro.setVisible(true);
                            currentlyOpen[6] = parametro;
                        } else{
                            JOptionPane.showMessageDialog(this, "È già presente un form per: PARAMETRO",
                                                          "Errore", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case 7:
                        if(currentlyOpen[7] == null){
                            Tipo tipo = new Tipo();
                            tipo.setVisible(true);
                            currentlyOpen[7] = tipo;
                        } else{
                            JOptionPane.showMessageDialog(this, "È già presente un form per: TIPO",
                                                          "Errore", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case 8:
                        if(currentlyOpen[8] == null){
                            Partecipazione partecipazione = new Partecipazione();
                            partecipazione.setVisible(true);
                            currentlyOpen[8] = partecipazione;
                        } else{
                            JOptionPane.showMessageDialog(this, "È già presente un form per: PARTECIPAZIONE",
                                                          "Errore", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case 9:
                        if(currentlyOpen[9] == null){
                            Literal literal = new Literal();
                            literal.setVisible(true);
                            currentlyOpen[9] = literal;
                        } else{
                            JOptionPane.showMessageDialog(this, "È già presente un form per: LITERAL",
                                                          "Errore", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case 10:
                        if(currentlyOpen[10] == null){
                            Qualificazione qualificazione = new Qualificazione();
                            qualificazione.setVisible(true);
                            currentlyOpen[10] = qualificazione;
                        } else{
                            JOptionPane.showMessageDialog(this, "È già presente un form per: QUALIFICAZIONE",
                                                          "Errore", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case 11:
                        if(currentlyOpen[11] == null){
                            Realizzazione realizzazione = new Realizzazione();
                            realizzazione.setVisible(true);
                            currentlyOpen[11] = realizzazione;
                        } else{
                            JOptionPane.showMessageDialog(this, "È già presente un form per: REALIZZAZIONE",
                                                          "Errore", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case 12:
                        if(currentlyOpen[12] == null){
                            Composizione composizione = new Composizione();
                            composizione.setVisible(true);
                            currentlyOpen[12] = composizione;
                        } else{
                            JOptionPane.showMessageDialog(this, "È già presente un form per: COMPOSIZIONE",
                                                          "Errore", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case 13:
                        if(currentlyOpen[13] == null){
                            Dipendenza dipendenza = new Dipendenza();
                            dipendenza.setVisible(true);
                            currentlyOpen[13] = dipendenza;
                        } else{
                            JOptionPane.showMessageDialog(this, "È già presente un form per: DIPENDENZA",
                                                          "Errore", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                    case 14:
                        if(currentlyOpen[14] == null){
                            SpecialInterf specialInterf = new SpecialInterf();
                            specialInterf.setVisible(true);
                            currentlyOpen[14] = specialInterf;
                        } else{
                            JOptionPane.showMessageDialog(this, "È già presente un form per: SPECIAL_INTERF",
                                                          "Errore", JOptionPane.ERROR_MESSAGE);
                        }
                        break;
                }
            }
        } else{
            JOptionPane.showMessageDialog(this, "Nessun modello selezionato!",
                                          "Errore", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DBOperation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DBOperation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DBOperation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DBOperation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DBOperation DBop = new DBOperation();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonStart;
    private javax.swing.JLabel jLabelList;
    private javax.swing.JLabel jLabelOperation;
    private javax.swing.JList<String> jList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
