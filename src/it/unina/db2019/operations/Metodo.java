/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.unina.db2019.operations;

import static it.unina.db2019.operations.DefaultFrame.ELIMINA;
import static it.unina.db2019.operations.DefaultFrame.INSERISCI;
import static it.unina.db2019.operations.DefaultFrame.MODIFICA;
import static it.unina.db2019.operations.DefaultFrame.RICERCA;
import it.unina.db2019.project.DBConnection;
import it.unina.db2019.project.DBOperation;
import java.sql.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Sysken
 */
public class Metodo extends DefaultFrame {
    
    private boolean isLike = true;
    private Object bean;

    /**
     * Creates new customizer Metodo
     */
    public Metodo() {
        initComponents();
        this.setLocationRelativeTo(null);
        setFrameTable(jTableMetodo);
        setNomeTabella("METODO");
        jTextFieldNome.setEnabled(false);
        jTextFieldDescrizione.setEnabled(false);
        jRadioButtonEqual.setVisible(false);
        jTableMetodo.setFocusable(false);
        jRadioButtonEqual.setFocusable(false);
        jComboBoxScope.setEnabled(false);
        jComboBoxScope.setFocusable(false);
        jRadioButtonSign.setFocusable(false);
        jRadioButtonSign.setVisible(false);
        jTextFieldClasse.setEnabled(false);
        jTextFieldInterfaccia.setEnabled(false);
        jTextFieldReturn.setEnabled(false);
        jLabelSign.setVisible(false);
        Aggiorna();     
        jTableMetodo.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                if(jTableMetodo.getSelectedRow() != -1 && (!jRadioButtonSign.isSelected() || (jRadioButtonSign.isSelected() && getModalita() != RICERCA))){
                    getInfo();
                }
            }
        }); 
    }
    
    public void setObject(Object bean) {
        this.bean = bean;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelNome = new javax.swing.JLabel();
        jLabelDescrizione = new javax.swing.JLabel();
        jLabelScope = new javax.swing.JLabel();
        jLabelClasse = new javax.swing.JLabel();
        jLabelInterfaccia = new javax.swing.JLabel();
        jLabelReturn = new javax.swing.JLabel();
        jTextFieldNome = new javax.swing.JTextField();
        jTextFieldDescrizione = new javax.swing.JTextField();
        jComboBoxScope = new javax.swing.JComboBox<>();
        jTextFieldClasse = new javax.swing.JTextField();
        jTextFieldReturn = new javax.swing.JTextField();
        jTextFieldInterfaccia = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableMetodo = new javax.swing.JTable();
        jRadioButtonEqual = new javax.swing.JRadioButton();
        jRadioButtonSign = new javax.swing.JRadioButton();
        jLabelSign = new javax.swing.JLabel();

        setTitle("UML STORAGE - METODO");
        setMinimumSize(new java.awt.Dimension(0, 630));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabelNome.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabelNome.setText("Nome:");

        jLabelDescrizione.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabelDescrizione.setText("Descrizione:");

        jLabelScope.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabelScope.setText("Scope:");

        jLabelClasse.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabelClasse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/unina/db2019/operations/fk.png"))); // NOI18N
        jLabelClasse.setText("| Classe:");

        jLabelInterfaccia.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabelInterfaccia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/unina/db2019/operations/fk.png"))); // NOI18N
        jLabelInterfaccia.setText("| Interfaccia:");

        jLabelReturn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabelReturn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/unina/db2019/operations/fk.png"))); // NOI18N
        jLabelReturn.setText("| Return:");

        jTextFieldNome.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextFieldNome.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTextFieldDescrizione.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextFieldDescrizione.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextFieldDescrizione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDescrizioneActionPerformed(evt);
            }
        });

        jComboBoxScope.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jComboBoxScope.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "public", "package", "protected", "private" }));

        jTextFieldClasse.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextFieldClasse.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTextFieldReturn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextFieldReturn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTextFieldInterfaccia.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextFieldInterfaccia.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTableMetodo.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTableMetodo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "null", "null", "null"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableMetodo);

        jRadioButtonEqual.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jRadioButtonEqual.setSelected(true);
        jRadioButtonEqual.setText("Like");

        jRadioButtonSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSignActionPerformed(evt);
            }
        });

        jLabelSign.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabelSign.setText("Segnatura:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabelClasse)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextFieldClasse))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(36, 36, 36)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabelScope)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jComboBoxScope, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabelNome)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jLabelReturn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelInterfaccia, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelSign, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButtonSign)
                                .addGap(190, 190, 190))
                            .addComponent(jTextFieldInterfaccia)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabelDescrizione)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldDescrizione, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonEqual))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 721, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(156, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNome)
                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDescrizione)
                    .addComponent(jTextFieldDescrizione, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonEqual))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelScope)
                    .addComponent(jComboBoxScope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelClasse)
                    .addComponent(jTextFieldClasse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldInterfaccia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelInterfaccia))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelReturn)
                        .addComponent(jTextFieldReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelSign))
                    .addComponent(jRadioButtonSign))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldDescrizioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDescrizioneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDescrizioneActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        DBOperation.currentlyOpen[5] = null;
    }//GEN-LAST:event_formWindowClosing

    private void jRadioButtonSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSignActionPerformed
        jTextFieldNome.setEnabled(!jTextFieldNome.isEnabled());
        jTextFieldDescrizione.setEnabled(!jTextFieldDescrizione.isEnabled());
        jComboBoxScope.setEnabled(!jComboBoxScope.isEnabled());
        jRadioButtonEqual.setEnabled(!jRadioButtonEqual.isEnabled());
        jTextFieldClasse.setEnabled(!jTextFieldClasse.isEnabled());
        jTextFieldInterfaccia.setEnabled(!jTextFieldInterfaccia.isEnabled());     
        jTextFieldReturn.setEnabled(!jTextFieldReturn.isEnabled());  
    }//GEN-LAST:event_jRadioButtonSignActionPerformed

@Override
    public void setModalita(int modo){
        super.setModalita(modo);
        switch (modo) {
           case INSERISCI:
              setEnabledjTextFieldPK(true);
              jTextFieldNome.setEnabled(true);
              jTextFieldDescrizione.setEnabled(true);
              jComboBoxScope.setEnabled(true);
              jRadioButtonEqual.setVisible(false);
              jTextFieldClasse.setEnabled(true);
              jTextFieldInterfaccia.setEnabled(true);     
              jTextFieldReturn.setEnabled(true);
              jRadioButtonSign.setVisible(false);
              jLabelSign.setVisible(false);
              break;
           case MODIFICA:
              setEnabledjTextFieldPK(false);
              jTextFieldNome.setEnabled(true);
              jTextFieldDescrizione.setEnabled(true);
              jComboBoxScope.setEnabled(true);
              jRadioButtonEqual.setVisible(false);
              jTextFieldClasse.setEnabled(true);
              jTextFieldInterfaccia.setEnabled(true);     
              jTextFieldReturn.setEnabled(true);    
              jRadioButtonSign.setVisible(false);
              jLabelSign.setVisible(false);
              break;
           case ELIMINA:
              setEnabledjTextFieldPK(false);
              jTextFieldNome.setEnabled(false);
              jTextFieldDescrizione.setEnabled(false);
              jComboBoxScope.setEnabled(false);
              jRadioButtonEqual.setVisible(false);
              jTextFieldClasse.setEnabled(false);
              jTextFieldInterfaccia.setEnabled(false);     
              jTextFieldReturn.setEnabled(false);   
              jRadioButtonSign.setVisible(false);
              jLabelSign.setVisible(false);
              break;
           case RICERCA:      
              setEnabledjTextFieldPK(true);
              jRadioButtonSign.setVisible(true);
              jLabelSign.setVisible(true);
              if(jRadioButtonSign.isSelected()){
                jTextFieldNome.setEnabled(false);
                jTextFieldDescrizione.setEnabled(false);
                jComboBoxScope.setEnabled(false);
                jRadioButtonEqual.setVisible(true);
                jTextFieldClasse.setEnabled(false);
                jTextFieldInterfaccia.setEnabled(false);     
                jTextFieldReturn.setEnabled(false);  
              } else{
                jTextFieldNome.setEnabled(true);
                jTextFieldDescrizione.setEnabled(true);
                jComboBoxScope.setEnabled(true);
                jRadioButtonEqual.setVisible(true);
                jTextFieldClasse.setEnabled(true);
                jTextFieldInterfaccia.setEnabled(true);     
                jTextFieldReturn.setEnabled(true);  
              }

              break;
        }
    }

    @Override
    protected PreparedStatement selectAll(){
        Connection con;
        PreparedStatement st = null;
        super.selectAll();
        query = query + "ORDER BY ID_METODO ";
        try {
           con = DBConnection.getConnection();
           st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE,
                   ResultSet.CONCUR_READ_ONLY); 
        } catch (SQLException e) {
        }
        return st;
    }

    @Override
    protected void pulisci(){
        super.pulisci();
        jTextFieldNome.setText("");
        jTextFieldDescrizione.setText("");
        jComboBoxScope.setSelectedIndex(0);
        jTextFieldInterfaccia.setText("");
        jTextFieldReturn.setText("");
        jTextFieldClasse.setText("");
        jTableMetodo.clearSelection();
        jRadioButtonEqual.setSelected(true);
        if(jRadioButtonSign.isSelected() && getModalita() == super.RICERCA){
            jRadioButtonSign.setSelected(false);
            jTextFieldNome.setEnabled(true);
            jTextFieldDescrizione.setEnabled(true);
            jComboBoxScope.setEnabled(true);
            jRadioButtonEqual.setVisible(true);
            jTextFieldClasse.setEnabled(true);
            jTextFieldInterfaccia.setEnabled(true);     
            jTextFieldReturn.setEnabled(true); 
        }
        
        super.setFocusPK();
    }

    @Override
    protected void getInfo(){
        selectedRow = jTableMetodo.getSelectedRow();
        setJTextFieldPK((jTableMetodo.getValueAt(selectedRow, 0)).toString());
        jTextFieldNome.setText((String)jTableMetodo.getValueAt(selectedRow, 1));
        jTextFieldDescrizione.setText((String)jTableMetodo.getValueAt(selectedRow, 2));
        String scope = (String)jTableMetodo.getValueAt(selectedRow, 3);
        if(scope.equals("public")){
            jComboBoxScope.setSelectedIndex(1);
        } else if(scope.equals("package")){
            jComboBoxScope.setSelectedIndex(2);
        } else if(scope.equals("protected")){
            jComboBoxScope.setSelectedIndex(3);
        } else {
            jComboBoxScope.setSelectedIndex(4);
        }
        if((jTableMetodo.getValueAt(selectedRow, 4) != null)){
            jTextFieldClasse.setText((jTableMetodo.getValueAt(selectedRow, 4)).toString());
        } else{
            jTextFieldClasse.setText("");
        }
        if((jTableMetodo.getValueAt(selectedRow, 5)) != null){
            jTextFieldInterfaccia.setText((jTableMetodo.getValueAt(selectedRow, 5)).toString());
        } else{
            jTextFieldInterfaccia.setText("");
        }
        if((jTableMetodo.getValueAt(selectedRow, 6)) != null){
            jTextFieldReturn.setText((jTableMetodo.getValueAt(selectedRow, 6)).toString());
        } else{
            jTextFieldReturn.setText("");
        }
    }

    @Override
    protected void Aggiorna(){
        PreparedStatement st = selectAll();
        eseguiQuery(st);
    }

    @Override
    protected PreparedStatement opInserisci(Connection c)
           throws SQLException{
        String cmdIns;
        PreparedStatement st;
        cmdIns = "insert into " + DBConnection.schema + ".METODO (ID_Metodo,Nome,"
                + "Descrizione, h_scope, FK_Classe, FK_Interfaccia, FK_Tipo)  values(?,?,?,?,?,?,?)";
        st = c.prepareStatement(cmdIns);
        if(getCodice().getText().equals("")){
            st.setNull(1, Types.INTEGER);
        } else{
            st.setInt(1, Integer.valueOf(getCodice().getText()));
        }
        st.setString(2, jTextFieldNome.getText());
        if(jTextFieldDescrizione.getText().equals("")){
          st.setNull(3, Types.VARCHAR);
        } else{
          st.setString(3, jTextFieldDescrizione.getText());
        }
        st.setString(4, jComboBoxScope.getSelectedItem().toString());
        if(jTextFieldClasse.getText().equals("")){
          st.setNull(5, Types.INTEGER);
        } else{
          st.setInt(5, Integer.valueOf(jTextFieldClasse.getText()));
        }
        if(jTextFieldInterfaccia.getText().equals("")){
          st.setNull(6, Types.INTEGER);
        } else{
          st.setInt(6, Integer.valueOf(jTextFieldInterfaccia.getText()));
        }
        if(jTextFieldReturn.getText().equals("")){
          st.setNull(7, Types.INTEGER);
        } else{
          st.setInt(7, Integer.valueOf(jTextFieldReturn.getText()));
        }
        return st;
    }

    @Override
    protected PreparedStatement opModifica(Connection c)
           throws SQLException{
        PreparedStatement st = null;
        if(!getCodice().getText().equals("")){
            String cmdUp;
            cmdUp = "update " + DBConnection.schema + ".METODO "
                            + " set Nome = ?, " 
                            + "     Descrizione = ?, "
                            + "     h_scope = ?, "
                            + "     FK_Classe = ?, "
                            + "     FK_Interfaccia = ?, "
                            + "     FK_Tipo = ? "
                            + " where ID_Metodo = ? ";
            st = c.prepareStatement(cmdUp);
            st.setString(1, jTextFieldNome.getText());
            st.setString(2, jTextFieldDescrizione.getText());
            st.setString(3, jComboBoxScope.getSelectedItem().toString());
            if(jTextFieldClasse.getText().equals("")){
                  st.setNull(4, Types.INTEGER);
            } else{
                  st.setInt(4, Integer.valueOf(jTextFieldClasse.getText()));
            }
            if(jTextFieldInterfaccia.getText().equals("")){
                  st.setNull(5, Types.INTEGER);
            } else{
                  st.setInt(5, Integer.valueOf(jTextFieldInterfaccia.getText()));
            }
            if(jTextFieldReturn.getText().equals("")){
                  st.setNull(6, Types.INTEGER);
            } else{
                  st.setInt(6, Integer.valueOf(jTextFieldReturn.getText()));
            }
            st.setInt(7, Integer.valueOf(getCodice().getText()));
        } else{
            JOptionPane.showMessageDialog(this, "Nessun record selezionato!",
                                          "Errore", JOptionPane.ERROR_MESSAGE);
        }
        return st;
    }

    @Override
    protected PreparedStatement opRicerca(Connection c)
           throws SQLException{
        PreparedStatement st = null;     
        String cmdSrc;
        int index = 1;
        if(!jRadioButtonSign.isSelected()){
            Pattern pat; 
            Matcher match;
            String descrizione;
            cmdSrc = "select * from " + DBConnection.schema + ".METODO where";
            if (getCodice().getText().length() > 0) {
               cmdSrc += " ID_Metodo = ? and";
            }
            if (jTextFieldNome.getText().length() > 0) {
               cmdSrc += " Nome = ? and";
            }
            descrizione = jTextFieldDescrizione.getText();
            if (descrizione.length() > 0) {
                if(isLike){
                    cmdSrc += " Descrizione like ? and";
                       descrizione = "%"+descrizione+"%";  
                } else{
                    cmdSrc += " Descrizione = ? and";
                }
            }
            if(!jComboBoxScope.getSelectedItem().toString().equals(" ")){
                cmdSrc += " h_scope = ? and";
            }
            if (jTextFieldClasse.getText().length() > 0) {
               cmdSrc += " FK_Classe = ? and";
            }
            if (jTextFieldInterfaccia.getText().length() > 0) {
               cmdSrc += " FK_Interfaccia = ? and";
            }
            if (jTextFieldReturn.getText().length() > 0) {
               cmdSrc += " FK_Tipo = ? and";
            }
            pat = Pattern.compile("(where|and)$"); 
            match = pat.matcher(cmdSrc);
            cmdSrc = match.replaceAll("");
            cmdSrc += " ORDER BY ID_METODO";
            try {
               st = c.prepareStatement(cmdSrc, ResultSet.TYPE_SCROLL_INSENSITIVE,
                       ResultSet.CONCUR_READ_ONLY); 
            } catch (SQLException e) {
            }
            if(st != null){
                if (getCodice().getText().length() > 0) {
                    st.setInt(index++, Integer.valueOf(getCodice().getText()));
                }
                if (jTextFieldNome.getText().length() > 0) {
                    st.setString(index++, jTextFieldNome.getText());
                }
                if (descrizione.length() > 0) {
                    st.setString(index++, descrizione);
                }
                if(!jComboBoxScope.getSelectedItem().toString().equals(" ")){
                    st.setString(index++, jComboBoxScope.getSelectedItem().toString());
                }
                if (jTextFieldClasse.getText().length() > 0) {
                    st.setInt(index++, Integer.valueOf(jTextFieldClasse.getText()));
                }
                if (jTextFieldInterfaccia.getText().length() > 0) {
                    st.setInt(index++, Integer.valueOf(jTextFieldInterfaccia.getText()));
                }
                if (jTextFieldReturn.getText().length() > 0) {
                    st.setInt(index++, Integer.valueOf(jTextFieldReturn.getText()));
                }
            }
        } else{
            if (getCodice().getText().length() > 0) {
               cmdSrc = "select getMethodSignature(?) AS Segnatura from DUAL";
            } else{
               cmdSrc = "select getMethodSignature(ID_Metodo) AS Segnatura from " + DBConnection.schema + ".METODO";
            }
            try {
               st = c.prepareStatement(cmdSrc, ResultSet.TYPE_SCROLL_INSENSITIVE,
                       ResultSet.CONCUR_READ_ONLY); 
            } catch (SQLException e) {}
            if(st != null){
                if (getCodice().getText().length() > 0) {
                        st.setInt(index++, Integer.valueOf(getCodice().getText()));
                }
            }
        }
        return st; 
    }

    @Override
    protected PreparedStatement opElimina(Connection c)
           throws SQLException{
        PreparedStatement st = null;
        if(!getCodice().getText().equals("")){
            String cmdDel;
            cmdDel = "delete from " + DBConnection.schema + ".METODO where "
                      + "ID_Metodo = ? ";
            st = c.prepareStatement(cmdDel);
            st.setInt(1, Integer.valueOf(getCodice().getText()));
        } else{
            JOptionPane.showMessageDialog(this, "Nessun record selezionato!",
                                          "Errore", JOptionPane.ERROR_MESSAGE);
        }
        return st;
    }

    @Override
    protected void reselectPrevRow(){
        if(jTableMetodo.getRowCount() > 0){
            switch(getModalita()){
                case MODIFICA:
                    jTableMetodo.setRowSelectionInterval(selectedRow, selectedRow);
                    break;
                case INSERISCI:
                    jTableMetodo.setRowSelectionInterval(jTableMetodo.getRowCount()-1, jTableMetodo.getRowCount()-1);
                    break;
                case ELIMINA:
                    if(selectedRow < jTableMetodo.getRowCount()){
                            jTableMetodo.setRowSelectionInterval(selectedRow, selectedRow);
                    } else{
                        jTableMetodo.setRowSelectionInterval(selectedRow-1, selectedRow-1);
                    }     
            }
        }    
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBoxScope;
    private javax.swing.JLabel jLabelClasse;
    private javax.swing.JLabel jLabelDescrizione;
    private javax.swing.JLabel jLabelInterfaccia;
    private javax.swing.JLabel jLabelNome;
    private javax.swing.JLabel jLabelReturn;
    private javax.swing.JLabel jLabelScope;
    private javax.swing.JLabel jLabelSign;
    private javax.swing.JRadioButton jRadioButtonEqual;
    private javax.swing.JRadioButton jRadioButtonSign;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableMetodo;
    private javax.swing.JTextField jTextFieldClasse;
    private javax.swing.JTextField jTextFieldDescrizione;
    private javax.swing.JTextField jTextFieldInterfaccia;
    private javax.swing.JTextField jTextFieldNome;
    private javax.swing.JTextField jTextFieldReturn;
    // End of variables declaration//GEN-END:variables
}
