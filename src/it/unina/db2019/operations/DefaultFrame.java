/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.unina.db2019.operations;

import it.unina.db2019.project.*;
import java.sql.*;
import javax.swing.*;
import java.awt.Dimension;
import java.awt.Toolkit;

/**
 *
 * @author gennaro
 */
abstract public class DefaultFrame extends javax.swing.JFrame implements java.beans.Customizer {
    
    private int modalita; // Stato corrente del Frame
    private DBTableModel modelloTabella;
    protected int selectedRow;
    
    private String nomeTabella;
    final static public int CONTESTO_ESEGUI_QUERY = 1;
    private javax.swing.JTable tabFrameTable;
   /**
    * Indica che il frame si trova nello stato di inserimento di un nuovo record
    */
   final static public int INSERISCI = 1;
   /**
    * Indica che il frame si trova nello stato di ricerca
    */
   final static public int RICERCA = 2;
   /**
    * Indica che il frame si trova nello stato di modifica dei dati.
    */
   final static public int MODIFICA = 3;
   
   /**
    * Indica che il frame si trova nello stato di eliminazione dei dati.
    */
   final static public int ELIMINA = 4;
   /**
   * Query da eseguire.
   */
   protected String query;
  /**
    * ResultSet dell'ultima query eseguita.
    */
   protected ResultSet rs;
    /**
     * Creates new form DefaultFrame
     */
   
    public DefaultFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        jToggleButtonInsert.setFocusable(false);
        jToggleButtonUpdate.setFocusable(false);
        jToggleButtonSearch.setFocusable(false);
        jToggleButtonDelete.setFocusable(false);
        jButtonStart.setFocusable(false);
        jButtonClean.setFocusable(false);  
        jButtonStart.setVisible(false);
        jButtonTable.setVisible(false);
        jButtonTable.setFocusable(false);
        jTextFieldPrimaryKey.setEnabled(false);
        this.setResizable(false);
        setIcon();
    }
    
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("iconCD.png")));
    }
    
    protected javax.swing.JTextField getCodice() {
      return jTextFieldPrimaryKey;
   }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButtonInsert = new javax.swing.JToggleButton();
        jToggleButtonUpdate = new javax.swing.JToggleButton();
        jToggleButtonSearch = new javax.swing.JToggleButton();
        jToggleButtonDelete = new javax.swing.JToggleButton();
        jButtonStart = new javax.swing.JButton();
        jButtonClean = new javax.swing.JButton();
        jTextFieldPrimaryKey = new javax.swing.JTextField();
        jLabelPK = new javax.swing.JLabel();
        jButtonTable = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(942, 0));
        getContentPane().setLayout(null);

        jToggleButtonInsert.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jToggleButtonInsert.setText("Inserisci");
        jToggleButtonInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonInsertActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButtonInsert);
        jToggleButtonInsert.setBounds(40, 20, 94, 40);

        jToggleButtonUpdate.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jToggleButtonUpdate.setText("Modifica");
        jToggleButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButtonUpdate);
        jToggleButtonUpdate.setBounds(150, 20, 94, 40);

        jToggleButtonSearch.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jToggleButtonSearch.setText("Ricerca");
        jToggleButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonSearchActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButtonSearch);
        jToggleButtonSearch.setBounds(260, 20, 94, 40);

        jToggleButtonDelete.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jToggleButtonDelete.setText("Elimina");
        jToggleButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(jToggleButtonDelete);
        jToggleButtonDelete.setBounds(370, 20, 94, 40);

        jButtonStart.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButtonStart.setText("Avvia");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonStart);
        jButtonStart.setBounds(810, 20, 94, 40);

        jButtonClean.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButtonClean.setText("Pulisci");
        jButtonClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCleanActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonClean);
        jButtonClean.setBounds(371, 87, 94, 40);

        jTextFieldPrimaryKey.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextFieldPrimaryKey.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getContentPane().add(jTextFieldPrimaryKey);
        jTextFieldPrimaryKey.setBounds(120, 96, 233, 23);

        jLabelPK.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabelPK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/unina/db2019/operations/pk.png"))); // NOI18N
        jLabelPK.setText("| Codice: ");
        getContentPane().add(jLabelPK);
        jLabelPK.setBounds(35, 91, 81, 32);

        jButtonTable.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButtonTable.setText("Tabella");
        jButtonTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTableActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonTable);
        jButtonTable.setBounds(700, 20, 94, 40);
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButtonInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonInsertActionPerformed
        if(jToggleButtonInsert.isSelected() == false){
            jToggleButtonInsert.setSelected(true);
        } 
        setModalita(INSERISCI);
    }//GEN-LAST:event_jToggleButtonInsertActionPerformed

    private void jToggleButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonUpdateActionPerformed
          if(jToggleButtonUpdate.isSelected() == false){
            jToggleButtonUpdate.setSelected(true);
        } 
        setModalita(MODIFICA);
    }//GEN-LAST:event_jToggleButtonUpdateActionPerformed

    private void jToggleButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonSearchActionPerformed
        if(jToggleButtonSearch.isSelected() == false){
            jToggleButtonSearch.setSelected(true);
        } 
        setModalita(RICERCA);
    }//GEN-LAST:event_jToggleButtonSearchActionPerformed

    private void jToggleButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonDeleteActionPerformed
        if(jToggleButtonDelete.isSelected() == false){
            jToggleButtonDelete.setSelected(true);
        }
        setModalita(ELIMINA);
    }//GEN-LAST:event_jToggleButtonDeleteActionPerformed

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
       PreparedStatement st = null; 
       Connection c = null;
       boolean ret = false; 
       try {
          c = DBConnection.newConnection();
          switch(modalita){
              case INSERISCI:
                  st = opInserisci(c);
                  break;
              case ELIMINA:
                  st = opElimina(c);
                  break;
              case MODIFICA:
                  st = opModifica(c);
                  break;
              default:
                  jButtonTable.setVisible(true);
                  st = opRicerca(c);
                  
          }  
          if(st != null && modalita != RICERCA){
            c.setAutoCommit(false);
            ret = st.executeUpdate() >= 0;
                if (ret) {
                    c.commit();
                } else {
                    c.rollback();
                }
                c.setAutoCommit(true);
            }
       } catch (SQLException e) {
          mostraErrori(e);
          ret = false;
       }
       if(modalita != RICERCA){
            if (ret) {
                Aggiorna();
            }else {
                try {
                    if (c != null) {
                        c.rollback();
                        c.setAutoCommit(true);
                    }
                } catch (SQLException e) {
                    mostraErrori(e);
                }
            }
            cascadeUpdate();
       } else{
           eseguiQuery(st);
       }
       reselectPrevRow();
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void jButtonCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCleanActionPerformed
        pulisci();
    }//GEN-LAST:event_jButtonCleanActionPerformed

    private void jButtonTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTableActionPerformed
        Aggiorna();
        jButtonTable.setVisible(false);
    }//GEN-LAST:event_jButtonTableActionPerformed
  
    public void clearSelection() {
        tabFrameTable.clearSelection();
    }
    
    protected int getModalita(){
        return modalita;
    }
    
    public void setModalita(int modo) {
      modalita = modo;
      switch (modo) {
         case INSERISCI:
            if(jToggleButtonInsert.isSelected() == true){
                jButtonStart.setVisible(true);
                jToggleButtonUpdate.setSelected(false);
                jToggleButtonSearch.setSelected(false);
                jToggleButtonDelete.setSelected(false);
            }
            break;
         case RICERCA:
            if(jToggleButtonSearch.isSelected() == true){
                jButtonStart.setVisible(true);
                jToggleButtonInsert.setSelected(false);
                jToggleButtonUpdate.setSelected(false);
                jToggleButtonDelete.setSelected(false);
            }    
            break;
         case MODIFICA:
            if(jToggleButtonUpdate.isSelected() == true){
                jButtonStart.setVisible(true);
                jToggleButtonInsert.setSelected(false);
                jToggleButtonSearch.setSelected(false);
                jToggleButtonDelete.setSelected(false);
            }      
            break;
         case ELIMINA:
            if(jToggleButtonDelete.isSelected() == true){
                jButtonStart.setVisible(true);
                jToggleButtonInsert.setSelected(false);
                jToggleButtonUpdate.setSelected(false);
                jToggleButtonSearch.setSelected(false);  
            }
            break;
       }
       getRootPane().setDefaultButton(jButtonStart);
   }
    
  String getNomeTabella() {
      return nomeTabella;
   }

   final void setNomeTabella(String nomeTabella) {
      this.nomeTabella = nomeTabella;
   }

    protected final void setFrameTable(JTable t) {
      tabFrameTable = t;
      modelloTabella = new DBTableModel(this);
      tabFrameTable.setModel(modelloTabella);
      tabFrameTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    } 
    
  protected void mostraErrori(SQLException e, String query, int contesto) {
      String msg;
      if ((e.getErrorCode() == 17068 | e.getErrorCode() == 17011) & 
              contesto != CONTESTO_ESEGUI_QUERY) {
         return; //questi errori non mi interessano
      }
      msg = "ErrorCode= " + e.getErrorCode() + "\n";
      msg += "Message= " + e.getMessage() + "\n";
      // msg += "SQLState= " + e.getSQLState() + "\n";

      JOptionPane.showMessageDialog(this, msg, "Errore",
                                    JOptionPane.ERROR_MESSAGE);
   }
  
   protected void mostraErrori(SQLException e) {
      mostraErrori(e, "", 0);
   }
   
   protected void mostraErrori(Exception e, int contesto) {
      String msg;
      msg = "Message= " + e.getMessage() + "\n";

      JOptionPane.showMessageDialog(this, msg, "Errore",
                                    JOptionPane.ERROR_MESSAGE);
   }
   
    protected void mostraErrori(Exception e) {
      mostraErrori(e, 0);
    }
    
    protected void pulisci() {
        jTextFieldPrimaryKey.setText("");
    }
    
    protected void setFocusPK(){
        jTextFieldPrimaryKey.requestFocus();
    }
    
    public void setTableName(String s){
        nomeTabella = s;
    }
    
    protected void eseguiQuery(PreparedStatement st) {
      try {
         rs = st.executeQuery();
         modelloTabella.setRS(rs);
      } catch (SQLException e) {
         mostraErrori(e, query, CONTESTO_ESEGUI_QUERY);
      } catch (java.lang.NullPointerException e) {
         /* non devo mostrare nessun errore
          * si dovrebbe verificare solo se st=null
          * quando la connessione è caduta
          */
      }
   }
    
    protected void cascadeUpdate(){
        for(DefaultFrame form: DBOperation.currentlyOpen){
            if(form != null){
                form.Aggiorna();
            }
        }
    }
    
    protected boolean isJTextFieldPKEnabled(){
        return jTextFieldPrimaryKey.isEnabled();
    }
    
    protected void setJTextFieldPK(String s){
        jTextFieldPrimaryKey.setText(s);
    }
    
    protected PreparedStatement selectAll() {
      query = "select * from " + DBConnection.schema + "." + nomeTabella + " ";
      return null;
    }
     
    abstract protected void getInfo();
     
    abstract protected void Aggiorna();
    
    abstract protected PreparedStatement opInserisci(Connection c)
           throws SQLException;
    
    abstract protected PreparedStatement opModifica(Connection c)
           throws SQLException;
   
    abstract protected PreparedStatement opRicerca(Connection c)
           throws SQLException;
    
    abstract protected PreparedStatement opElimina(Connection c)
           throws SQLException;
     
    public void setEnabledjTextFieldPK(boolean enable){
        jTextFieldPrimaryKey.setEnabled(enable);
    }
    
    abstract protected void reselectPrevRow();  
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClean;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JButton jButtonTable;
    private javax.swing.JLabel jLabelPK;
    private javax.swing.JTextField jTextFieldPrimaryKey;
    private javax.swing.JToggleButton jToggleButtonDelete;
    private javax.swing.JToggleButton jToggleButtonInsert;
    private javax.swing.JToggleButton jToggleButtonSearch;
    private javax.swing.JToggleButton jToggleButtonUpdate;
    // End of variables declaration//GEN-END:variables
}
