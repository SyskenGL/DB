/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.unina.db2019.operations;

import it.unina.db2019.project.DBConnection;
import it.unina.db2019.project.DBOperation;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.event.*;

/**
 *
 * @author Sysken
 */
public class Interfaccia extends DefaultFrame {
    
    private boolean isLike = true;
    private Object bean;

    /**
     * Creates new customizer Interfaccia
     */
    public Interfaccia() {
        initComponents();
        this.setLocationRelativeTo(null);
        setFrameTable(jTableInterfaccia);
        setNomeTabella("INTERFACCIA");
        jTextFieldNome.setEnabled(false);
        jTextFieldDescrizione.setEnabled(false);  
        jTextFieldCD.setEnabled(false);  
        jTableInterfaccia.setFocusable(false);
        jRadioButtonEqual.setFocusable(false);
        Aggiorna();     
        jTableInterfaccia.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                if(jTableInterfaccia.getSelectedRow() != -1){
                    getInfo();
                }
            }
        }); 
    }
    
    public void setObject(Object bean) {
        this.bean = bean;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the FormEditor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelNome = new javax.swing.JLabel();
        jLabelDescrizione = new javax.swing.JLabel();
        jLabelCD = new javax.swing.JLabel();
        jTextFieldNome = new javax.swing.JTextField();
        jTextFieldDescrizione = new javax.swing.JTextField();
        jTextFieldCD = new javax.swing.JTextField();
        jRadioButtonEqual = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableInterfaccia = new javax.swing.JTable();

        setTitle("UML STORAGE - INTERFACCIA");
        setMinimumSize(new java.awt.Dimension(0, 550));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabelNome.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabelNome.setText("Nome:");

        jLabelDescrizione.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabelDescrizione.setText("Descrizione:");

        jLabelCD.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabelCD.setIcon(new javax.swing.ImageIcon(getClass().getResource("/it/unina/db2019/operations/fk.png"))); // NOI18N
        jLabelCD.setText("| Class Diagram:");

        jTextFieldNome.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextFieldNome.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTextFieldDescrizione.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextFieldDescrizione.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTextFieldCD.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextFieldCD.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jRadioButtonEqual.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jRadioButtonEqual.setSelected(true);
        jRadioButtonEqual.setText("Like");
        jRadioButtonEqual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonEqualActionPerformed(evt);
            }
        });

        jTableInterfaccia.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTableInterfaccia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableInterfaccia);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelNome)
                            .addComponent(jLabelDescrizione)
                            .addComponent(jLabelCD))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextFieldNome)
                                .addComponent(jTextFieldCD, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldDescrizione, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButtonEqual)))))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNome)
                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDescrizione)
                    .addComponent(jTextFieldDescrizione, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonEqual))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCD)
                    .addComponent(jTextFieldCD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButtonEqualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonEqualActionPerformed
        isLike = !isLike;
    }//GEN-LAST:event_jRadioButtonEqualActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        DBOperation.currentlyOpen[2] = null;
    }//GEN-LAST:event_formWindowClosing

    @Override
    public void setModalita(int modo){
        super.setModalita(modo);
        switch (modo) {
           case INSERISCI:
              setEnabledjTextFieldPK(true);
              jTextFieldNome.setEnabled(true);
              jTextFieldDescrizione.setEnabled(true);
              jTextFieldCD.setEnabled(true);
              break;
           case MODIFICA:
              setEnabledjTextFieldPK(false);
              jTextFieldNome.setEnabled(true);
              jTextFieldDescrizione.setEnabled(true);
              jTextFieldCD.setEnabled(false);
              break;
           case ELIMINA:
              setEnabledjTextFieldPK(false);
              jTextFieldNome.setEnabled(false);
              jTextFieldDescrizione.setEnabled(false);
              jTextFieldCD.setEnabled(false);
              break;
           case RICERCA:
              setEnabledjTextFieldPK(true);
              jTextFieldNome.setEnabled(true);
              jTextFieldDescrizione.setEnabled(true);
              jTextFieldCD.setEnabled(true);
              break;
        }
    }

    @Override
    protected PreparedStatement selectAll(){
        Connection con;
        PreparedStatement st = null;
        super.selectAll();
        query = query + "ORDER BY ID_INTERFACCIA ";
        try {
           con = DBConnection.getConnection();
           st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE,
                   ResultSet.CONCUR_READ_ONLY); 
        } catch (SQLException e) {
        }
        return st;
    }

    @Override
    protected void pulisci(){
        super.pulisci();
        jTextFieldNome.setText("");
        jTextFieldDescrizione.setText("");
        jTextFieldCD.setText("");
        jTableInterfaccia.clearSelection();
        super.setFocusPK();
    }

    @Override
    protected void getInfo(){
        selectedRow = jTableInterfaccia.getSelectedRow();
        setJTextFieldPK((jTableInterfaccia.getValueAt(selectedRow, 0)).toString());
        jTextFieldNome.setText((String)jTableInterfaccia.getValueAt(selectedRow, 1));
        jTextFieldDescrizione.setText((String)jTableInterfaccia.getValueAt(selectedRow, 2));
        jTextFieldCD.setText((jTableInterfaccia.getValueAt(selectedRow, 3)).toString());
    }

    @Override
    protected void Aggiorna(){
        PreparedStatement st = selectAll();
        eseguiQuery(st);
    }

    @Override
    protected PreparedStatement opInserisci(Connection c)
           throws SQLException{
        String cmdIns;
        PreparedStatement st;
        cmdIns = "insert into " + DBConnection.schema + ".INTERFACCIA (ID_Interfaccia,Nome,"
                + "Descrizione, FK_ClassDiagram)  values(?,?,?,?)";
        st = c.prepareStatement(cmdIns);
        if(getCodice().getText().equals("")){
            st.setNull(1, Types.INTEGER);
        } else{
            st.setInt(1, Integer.valueOf(getCodice().getText()));
        }
        st.setString(2, jTextFieldNome.getText());
        if(jTextFieldDescrizione.getText().equals("")){
          st.setNull(3, Types.VARCHAR);
        } else{
          st.setString(3, jTextFieldDescrizione.getText());
        }
        st.setInt(4, Integer.valueOf(jTextFieldCD.getText()));
        return st;
    }

    @Override
    protected PreparedStatement opModifica(Connection c)
           throws SQLException{
        PreparedStatement st = null;
        if(!getCodice().getText().equals("")){
            String cmdUp;
            cmdUp = "update " + DBConnection.schema + ".INTERFACCIA "
                            + " set Nome = ?, " 
                            + "     Descrizione = ? "
                            + " where ID_Interfaccia = ? ";
            st = c.prepareStatement(cmdUp);
            st.setString(1, jTextFieldNome.getText());
            st.setString(2, jTextFieldDescrizione.getText());
            st.setInt(3, Integer.valueOf(getCodice().getText()));
        } else{
            JOptionPane.showMessageDialog(this, "Nessun record selezionato!",
                                          "Errore", JOptionPane.ERROR_MESSAGE);
          }
        return st;
    }

    @Override
    protected PreparedStatement opRicerca(Connection c)
           throws SQLException{
        PreparedStatement st = null;
        String cmdSrc;
        int index = 1;
        Pattern pat;
        Matcher match;
        String descrizione;
        cmdSrc = "select * from " + DBConnection.schema + ".INTERFACCIA where";
        if (getCodice().getText().length() > 0) {
           cmdSrc += " ID_Interfaccia = ? and";
        }
        if (jTextFieldNome.getText().length() > 0) {
           cmdSrc += " Nome = ? and";
        }
        descrizione = jTextFieldDescrizione.getText();
        if (descrizione.length() > 0) {
           if(isLike){
               cmdSrc += " Descrizione like ? and";
               descrizione = "%"+descrizione+"%";  
           } else{
               cmdSrc += " Descrizione = ? and";
           }
        }
        if (jTextFieldCD.getText().length() > 0) {
           cmdSrc += " FK_ClassDiagram = ? and";
        }
        pat = Pattern.compile("(where|and)$"); 
        match = pat.matcher(cmdSrc);
        cmdSrc = match.replaceAll("");
        cmdSrc += " ORDER BY ID_INTERFACCIA";
        try {
           st = c.prepareStatement(cmdSrc, ResultSet.TYPE_SCROLL_INSENSITIVE,
                   ResultSet.CONCUR_READ_ONLY); 
        } catch (SQLException e) {
        }
        if(st != null){
            if (getCodice().getText().length() > 0) {
               st.setInt(index++, Integer.valueOf(getCodice().getText()));
            }
            if (jTextFieldNome.getText().length() > 0) {
               st.setString(index++, jTextFieldNome.getText());
            }
            if (descrizione.length() > 0) {
               st.setString(index++, descrizione);
            }
            if (jTextFieldCD.getText().length() > 0) {
               st.setInt(index++, Integer.valueOf(jTextFieldCD.getText()));
            }
        }
        return st; 
    }

    @Override
    protected PreparedStatement opElimina(Connection c)
           throws SQLException{
        PreparedStatement st = null;
        if(!getCodice().getText().equals("")){
            String cmdDel;
            cmdDel = "delete from " + DBConnection.schema + ".INTERFACCIA where "
                      + "ID_Interfaccia = ? ";
            st = c.prepareStatement(cmdDel);
            st.setInt(1, Integer.valueOf(getCodice().getText()));
        } else{
            JOptionPane.showMessageDialog(this, "Nessun record selezionato!",
                                          "Errore", JOptionPane.ERROR_MESSAGE);
        }
        return st;
    }
    
    @Override
    protected void reselectPrevRow(){
        if(jTableInterfaccia.getRowCount() > 0){
            switch(getModalita()){
                case MODIFICA:
                    jTableInterfaccia.setRowSelectionInterval(selectedRow, selectedRow);
                    break;
                case INSERISCI:
                    jTableInterfaccia.setRowSelectionInterval(jTableInterfaccia.getRowCount()-1, jTableInterfaccia.getRowCount()-1);
                    break;
                case ELIMINA:
                    if(selectedRow < jTableInterfaccia.getRowCount()){
                            jTableInterfaccia.setRowSelectionInterval(selectedRow, selectedRow);
                    } else{
                        jTableInterfaccia.setRowSelectionInterval(selectedRow-1, selectedRow-1);
                    }     
            }
        }    
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelCD;
    private javax.swing.JLabel jLabelDescrizione;
    private javax.swing.JLabel jLabelNome;
    private javax.swing.JRadioButton jRadioButtonEqual;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableInterfaccia;
    private javax.swing.JTextField jTextFieldCD;
    private javax.swing.JTextField jTextFieldDescrizione;
    private javax.swing.JTextField jTextFieldNome;
    // End of variables declaration//GEN-END:variables
}
